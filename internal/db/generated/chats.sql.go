// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: chats.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createChat = `-- name: CreateChat :one
INSERT INTO chats (id, title, user_email, last_active_date, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, title, user_email, last_active_date, created_at, updated_at
`

type CreateChatParams struct {
	ID             uuid.UUID `json:"id"`
	Title          string    `json:"title"`
	UserEmail      string    `json:"user_email"`
	LastActiveDate time.Time `json:"last_active_date"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
}

func (q *Queries) CreateChat(ctx context.Context, arg CreateChatParams) (Chat, error) {
	row := q.queryRow(ctx, q.createChatStmt, createChat,
		arg.ID,
		arg.Title,
		arg.UserEmail,
		arg.LastActiveDate,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserEmail,
		&i.LastActiveDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChat = `-- name: GetChat :one
SELECT id, title, user_email, last_active_date, created_at, updated_at FROM chats
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetChat(ctx context.Context, id uuid.UUID) (Chat, error) {
	row := q.queryRow(ctx, q.getChatStmt, getChat, id)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserEmail,
		&i.LastActiveDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChatsByUserEmail = `-- name: GetChatsByUserEmail :many
SELECT id, title, user_email, last_active_date, created_at, updated_at FROM chats
WHERE user_email = $1
ORDER BY last_active_date DESC
`

func (q *Queries) GetChatsByUserEmail(ctx context.Context, userEmail string) ([]Chat, error) {
	rows, err := q.query(ctx, q.getChatsByUserEmailStmt, getChatsByUserEmail, userEmail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Chat{}
	for rows.Next() {
		var i Chat
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.UserEmail,
			&i.LastActiveDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChatLastActive = `-- name: UpdateChatLastActive :exec
UPDATE chats
SET last_active_date = $2, updated_at = $3
WHERE id = $1
`

type UpdateChatLastActiveParams struct {
	ID             uuid.UUID `json:"id"`
	LastActiveDate time.Time `json:"last_active_date"`
	UpdatedAt      time.Time `json:"updated_at"`
}

func (q *Queries) UpdateChatLastActive(ctx context.Context, arg UpdateChatLastActiveParams) error {
	_, err := q.exec(ctx, q.updateChatLastActiveStmt, updateChatLastActive, arg.ID, arg.LastActiveDate, arg.UpdatedAt)
	return err
}
