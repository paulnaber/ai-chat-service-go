// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: messages.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (id, content, sender_type, chat_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, content, sender_type, chat_id, created_at, updated_at
`

type CreateMessageParams struct {
	ID         uuid.UUID `json:"id"`
	Content    string    `json:"content"`
	SenderType string    `json:"sender_type"`
	ChatID     uuid.UUID `json:"chat_id"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.queryRow(ctx, q.createMessageStmt, createMessage,
		arg.ID,
		arg.Content,
		arg.SenderType,
		arg.ChatID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.SenderType,
		&i.ChatID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMessage = `-- name: GetMessage :one
SELECT id, content, sender_type, chat_id, created_at, updated_at FROM messages
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMessage(ctx context.Context, id uuid.UUID) (Message, error) {
	row := q.queryRow(ctx, q.getMessageStmt, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.SenderType,
		&i.ChatID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMessagesByChatID = `-- name: GetMessagesByChatID :many
SELECT id, content, sender_type, chat_id, created_at, updated_at FROM messages
WHERE chat_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetMessagesByChatID(ctx context.Context, chatID uuid.UUID) ([]Message, error) {
	rows, err := q.query(ctx, q.getMessagesByChatIDStmt, getMessagesByChatID, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.SenderType,
			&i.ChatID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
