definitions:
  api.CreateChatRequest:
    properties:
      content:
        type: string
    required:
    - content
    type: object
  api.CreateChatResponse:
    properties:
      id:
        type: string
      initialMessage:
        $ref: '#/definitions/models.MessageDTO'
      lastActiveDate:
        type: string
      title:
        type: string
    type: object
  api.CreateMessageRequest:
    properties:
      content:
        type: string
    required:
    - content
    type: object
  models.ChatDTO:
    properties:
      id:
        type: string
      lastActiveDate:
        type: string
      title:
        type: string
    type: object
  models.ErrorCode:
    enum:
    - VALIDATION_ERROR
    - UNAUTHORIZED
    - FORBIDDEN
    - RESOURCE_NOT_FOUND
    - SERVER_ERROR
    type: string
    x-enum-varnames:
    - ValidationError
    - UnauthorizedError
    - ForbiddenError
    - ResourceNotFoundError
    - ServerError
  models.ErrorDetail:
    properties:
      field:
        type: string
      value:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      code:
        $ref: '#/definitions/models.ErrorCode'
      details:
        items:
          $ref: '#/definitions/models.ErrorDetail'
        type: array
      message:
        type: string
    type: object
  models.MessageDTO:
    properties:
      chatId:
        type: string
      content:
        type: string
      createdAt:
        type: string
      id:
        type: string
      senderType:
        $ref: '#/definitions/models.SenderType'
    type: object
  models.SenderType:
    enum:
    - user
    - backend
    - llm
    type: string
    x-enum-varnames:
    - SenderTypeUser
    - SenderTypeBackend
    - SenderTypeLLM
info:
  contact: {}
paths:
  /v1/chats:
    get:
      description: Returns an array of chats owned by the user. User identity (email)
        is extracted from JWT token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ChatDTO'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all chats for a user
      tags:
      - Chats
    post:
      consumes:
      - application/json
      description: Creates a new chat with the initial message content. User identity
        (email) is extracted from JWT token.
      parameters:
      - description: Chat creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateChatRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.CreateChatResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new chat
      tags:
      - Chats
  /v1/chats/{chatId}/messages:
    get:
      description: Returns an array of messages for the specified chat. User identity
        (email) is extracted from JWT token.
      parameters:
      - description: ID of the chat whose messages to retrieve
        in: path
        name: chatId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.MessageDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all messages for a chat
      tags:
      - Messages
    post:
      consumes:
      - application/json
      description: Creates a new message in a specific chat. User identity (email)
        is extracted from JWT token.
      parameters:
      - description: ID of the chat this message belongs to
        in: path
        name: chatId
        required: true
        type: string
      - description: Message creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateMessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new message
      tags:
      - Messages
swagger: "2.0"
