{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "HTTP API for the AI Chat Service",
    "title": "AI Chat Service API",
    "contact": {
      "name": "API Support",
      "email": "support@example.com"
    },
    "license": {
      "name": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    },
    "version": "1.0.0"
  },
  "host": "localhost:3000",
  "basePath": "/",
  "paths": {
    "/v1/chats": {
      "get": {
        "description": "User identity (email) is extracted from JWT token.",
        "tags": [
          "Chats"
        ],
        "summary": "Returns an array of chats owned by the user.",
        "operationId": "getChats",
        "responses": {
          "200": {
            "$ref": "#/responses/ChatResponse"
          },
          "401": {
            "description": "ErrorResponse",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "ErrorResponse",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "User identity (email) is extracted from JWT token.",
        "tags": [
          "Chats"
        ],
        "summary": "Creates a new chat with the initial message content.",
        "operationId": "createChat",
        "responses": {
          "200": {
            "$ref": "#/responses/ChatWithMessageResponse"
          },
          "400": {
            "description": "ErrorResponse",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "ErrorResponse",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "ErrorResponse",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/chats/{chatId}/messages": {
      "get": {
        "description": "User identity (email) is extracted from JWT token.",
        "tags": [
          "Messages"
        ],
        "summary": "Returns an array of messages for the specified chat.",
        "operationId": "getMessages",
        "parameters": [
          {
            "type": "string",
            "name": "chatId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MessageResponse"
          },
          "400": {
            "description": "ErrorResponse",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "ErrorResponse",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "ErrorResponse",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "ErrorResponse",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "ErrorResponse",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "User identity (email) is extracted from JWT token.",
        "tags": [
          "Messages"
        ],
        "summary": "Creates a new message in a specific chat.",
        "operationId": "createMessage",
        "parameters": [
          {
            "type": "string",
            "name": "chatId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MessageResponse"
          },
          "400": {
            "description": "ErrorResponse",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "ErrorResponse",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "ErrorResponse",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "ErrorResponse",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "ErrorResponse",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ErrorDetail": {
      "description": "ErrorDetail represents details about validation errors",
      "type": "object",
      "properties": {
        "field": {
          "description": "The name of the field with an error",
          "type": "string",
          "x-go-name": "Field",
          "example": "content"
        },
        "value": {
          "description": "The error message or problematic value for this field",
          "type": "string",
          "x-go-name": "Value",
          "example": "Content cannot be empty"
        }
      },
      "x-go-package": "ai-chat-service-go/internal/models"
    },
    "ErrorResponse": {
      "description": "ErrorResponse represents a standardized error response",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code that identifies the error type\nVALIDATION_ERROR ValidationError  ValidationError indicates that validation failed\nUNAUTHORIZED UnauthorizedError  UnauthorizedError indicates that authentication is required\nFORBIDDEN ForbiddenError  ForbiddenError indicates that the user doesn't have permission\nRESOURCE_NOT_FOUND ResourceNotFoundError  ResourceNotFoundError indicates that the requested resource was not found\nSERVER_ERROR ServerError  ServerError indicates an unexpected server error",
          "type": "string",
          "enum": [
            "VALIDATION_ERROR",
            "UNAUTHORIZED",
            "FORBIDDEN",
            "RESOURCE_NOT_FOUND",
            "SERVER_ERROR"
          ],
          "x-go-enum-desc": "VALIDATION_ERROR ValidationError  ValidationError indicates that validation failed\nUNAUTHORIZED UnauthorizedError  UnauthorizedError indicates that authentication is required\nFORBIDDEN ForbiddenError  ForbiddenError indicates that the user doesn't have permission\nRESOURCE_NOT_FOUND ResourceNotFoundError  ResourceNotFoundError indicates that the requested resource was not found\nSERVER_ERROR ServerError  ServerError indicates an unexpected server error",
          "x-go-name": "Code",
          "example": "VALIDATION_ERROR"
        },
        "details": {
          "description": "List of field-value pairs with additional error information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorDetail"
          },
          "x-go-name": "Details"
        },
        "message": {
          "description": "Human-readable error description",
          "type": "string",
          "x-go-name": "Message",
          "example": "The request contains invalid parameters"
        }
      },
      "x-go-package": "ai-chat-service-go/internal/models"
    }
  },
  "securityDefinitions": {
    "BearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}